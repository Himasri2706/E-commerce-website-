// main.js (continued)
async function loadFeaturedProducts() {
    try {
        const response = await fetch('http://localhost:5000/api/products');
        
        if (!response.ok) {
            throw new Error('Failed to fetch products');
        }
        
        const products = await response.json();
        const featuredContainer = document.getElementById('featured-products');
        
        // Display only first 4 products as featured
        const featuredProducts = products.slice(0, 4);
        
        if (featuredProducts.length === 0) {
            // If no products available, show sample products
            displaySampleProducts(featuredContainer);
            return;
        }
        
        featuredProducts.forEach(product => {
            featuredContainer.appendChild(createProductCard(product));
        });
    } catch (error) {
        console.error('Error fetching featured products:', error);
        // Show sample products if API fails
        const featuredContainer = document.getElementById('featured-products');
        displaySampleProducts(featuredContainer);
    }
}

// Display sample products when API is not available
function displaySampleProducts(container) {
    const sampleProducts = [
        {
            _id: 'sample1',
            name: 'Wireless Earbuds',
            price: 79.99,
            image: 'https://via.placeholder.com/300',
            category: 'Electronics',
            description: 'High-quality wireless earbuds with noise cancellation.'
        },
        {
            _id: 'sample2',
            name: 'Cotton T-Shirt',
            price: 24.99,
            image: 'https://via.placeholder.com/300',
            category: 'Clothing',
            description: 'Comfortable cotton t-shirt, perfect for everyday wear.'
        },
        {
            _id: 'sample3',
            name: 'Coffee Maker',
            price: 49.99,
            image: 'https://via.placeholder.com/300',
            category: 'Home & Kitchen',
            description: 'Programmable coffee maker with timer.'
        },
        {
            _id: 'sample4',
            name: 'Mystery Novel',
            price: 14.99,
            image: 'https://via.placeholder.com/300',
            category: 'Books',
            description: 'Bestselling mystery novel that will keep you guessing.'
        }
    ];
    
    sampleProducts.forEach(product => {
        container.appendChild(createProductCard(product));
    });
}

// Create product card element
function createProductCard(product) {
    const card = document.createElement('div');
    card.className = 'product-card';
    
    card.innerHTML = `
        <div class="product-image">
            <img src="${product.image}" alt="${product.name}">
        </div>
        <div class="product-info">
            <h3 class="product-title">${product.name}</h3>
            <p class="product-category">${product.category}</p>
            <p class="product-price">$${product.price.toFixed(2)}</p>
            <div class="product-actions">
                <button class="btn add-to-cart-btn" data-id="${product._id}">Add to Cart</button>
            </div>
        </div>
    `;
    
    // Add event listener to "Add to Cart" button
    card.querySelector('.add-to-cart-btn').addEventListener('click', function() {
        addToCart(product);
    });
    
    return card;
}

// Add product to cart
function addToCart(product) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Check if product already exists in cart
    const existingItemIndex = cart.findIndex(item => item.product._id === product._id);
    
    if (existingItemIndex !== -1) {
        // Increment quantity if product already in cart
        cart[existingItemIndex].quantity += 1;
    } else {
        // Add new product to cart with quantity 1
        cart.push({
            product: product,
            quantity: 1
        });
    }
    
    // Save updated cart to localStorage
    localStorage.setItem('cart', JSON.stringify(cart));
    
    // Update cart count
    updateCartCount();
    
    // Show feedback to user
    alert(`${product.name} has been added to your cart.`);
}

// products.js
document.addEventListener('DOMContentLoaded', function() {
    // Update cart count
    updateCartCount();
    
    // Load all products
    loadProducts();
    
    // Add event listeners for filters
    document.getElementById('search-btn').addEventListener('click', applyFilters);
    document.getElementById('search-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            applyFilters();
        }
    });
    
    document.getElementById('category-select').addEventListener('change', applyFilters);
    document.getElementById('sort-select').addEventListener('change', applyFilters);
    
    // Check for URL parameters (for when redirected from categories)
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    
    if (categoryParam) {
        document.getElementById('category-select').value = categoryParam;
        applyFilters();
    }
});

// Update cart count
function updateCartCount() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const count = cart.reduce((total, item) => total + item.quantity, 0);
    document.getElementById('cart-count').textContent = count;
}

// Load all products
async function loadProducts() {
    try {
        const response = await fetch('http://localhost:5000/api/products');
        
        if (!response.ok) {
            throw new Error('Failed to fetch products');
        }
        
        const products = await response.json();
        displayProducts(products);
    } catch (error) {
        console.error('Error fetching products:', error);
        // Load sample products if API fails
        loadSampleProducts();
    }
}

// Load sample products if API is not available
function loadSampleProducts() {
    const sampleProducts = [
        {
            _id: 'sample1',
            name: 'Wireless Earbuds',
            price: 79.99,
            image: 'https://via.placeholder.com/300',
            category: 'Electronics',
            description: 'High-quality wireless earbuds with noise cancellation.'
        },
        {
            _id: 'sample2',
            name: 'Cotton T-Shirt',
            price: 24.99,
            image: 'https://via.placeholder.com/300',
            category: 'Clothing',
            description: 'Comfortable cotton t-shirt, perfect for everyday wear.'
        },
        {
            _id: 'sample3',
            name: 'Coffee Maker',
            price: 49.99,
            image: 'https://via.placeholder.com/300',
            category: 'Home & Kitchen',
            description: 'Programmable coffee maker with timer.'
        },
        {
            _id: 'sample4',
            name: 'Mystery Novel',
            price: 14.99,
            image: 'https://via.placeholder.com/300',
            category: 'Books',
            description: 'Bestselling mystery novel that will keep you guessing.'
        },
        {
            _id: 'sample5',
            name: 'Smartphone',
            price: 599.99,
            image: 'https://via.placeholder.com/300',
            category: 'Electronics',
            description: 'Latest smartphone with high-resolution camera.'
        },
        {
            _id: 'sample6',
            name: 'Jeans',
            price: 39.99,
            image: 'https://via.placeholder.com/300',
            category: 'Clothing',
            description: 'Classic blue jeans, slim fit.'
        },
        {
            _id: 'sample7',
            name: 'Blender',
            price: 34.99,
            image: 'https://via.placeholder.com/300',
            category: 'Home & Kitchen',
            description: 'High-speed blender for smoothies and more.'
        },
        {
            _id: 'sample8',
            name: 'Sci-Fi Novel',
            price: 12.99,
            image: 'https://via.placeholder.com/300',
            category: 'Books',
            description: 'Award-winning science fiction novel.'
        }
    ];
    
    displayProducts(sampleProducts);
}

// Display products in grid
function displayProducts(products) {
    const productsContainer = document.getElementById('products-container');
    productsContainer.innerHTML = '';
    
    if (products.length === 0) {
        productsContainer.innerHTML = '<p class="no-products">No products found. Try different filters.</p>';
        return;
    }
    
    products.forEach(product => {
        productsContainer.appendChild(createProductCard(product));
    });
}

// Create product card element
function createProductCard(product) {
    const card = document.createElement('div');
    card.className = 'product-card';
    
    card.innerHTML = `
        <div class="product-image">
            <img src="${product.image}" alt="${product.name}">
        </div>
        <div class="product-info">
            <h3 class="product-title">${product.name}</h3>
            <p class="product-category">${product.category}</p>
            <p class="product-price">$${product.price.toFixed(2)}</p>
            <div class="product-actions">
                <button class="btn add-to-cart-btn" data-id="${product._id}">Add to Cart</button>
            </div>
        </div>
    `;
    
    // Add event listener to "Add to Cart" button
    card.querySelector('.add-to-cart-btn').addEventListener('click', function() {
        addToCart(product);
    });
    
    return card;
}

// Add product to cart
function addToCart(product) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Check if product already exists in cart
    const existingItemIndex = cart.findIndex(item => item.product._id === product._id);
    
    if (existingItemIndex !== -1) {
        // Increment quantity if product already in cart
        cart[existingItemIndex].quantity += 1;
    } else {
        // Add new product to cart with quantity 1
        cart.push({
            product: product,
            quantity: 1
        });
    }
    
    // Save updated cart to localStorage
    localStorage.setItem('cart', JSON.stringify(cart));
    
    // Update cart count
    updateCartCount();
    
    // Show feedback to user
    alert(`${product.name} has been added to your cart.`);
}

// Apply filters to products
async function applyFilters() {
    try {
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        const category = document.getElementById('category-select').value;
        const sortOption = document.getElementById('sort-select').value;
        
        // Fetch all products
        const response = await fetch('http://localhost:5000/api/products');
        
        if (!response.ok) {
            throw new Error('Failed to fetch products');
        }
        
        let products = await response.json();
        
        // Filter by search term
        if (searchTerm) {
            products = products.filter(product => 
                product.name.toLowerCase().includes(searchTerm) || 
                product.description.toLowerCase().includes(searchTerm)
            );
        }
        
        // Filter by category
        if (category) {
            products = products.filter(product => product.category === category);
        }
        
        // Sort products
        if (sortOption) {
            switch (sortOption) {
                case 'price-asc':
                    products.sort((a, b) => a.price - b.price);
                    break;
                case 'price-desc':
                    products.sort((a, b) => b.price - a.price);
                    break;
                case 'name-asc':
                    products.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name-desc':
                    products.sort((a, b) => b.name.localeCompare(a.name));
                    break;
            }
        }
        
        // Display filtered products
        displayProducts(products);
    } catch (error) {
        console.error('Error applying filters:', error);
        // Use sample products if API fails
        applyFiltersToSample();
    }
}

// Apply filters to sample products if API fails
function applyFiltersToSample() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const category = document.getElementById('category-select').value;
    const sortOption = document.getElementById('sort-select').value;
    
    let products = [
        {
            _id: 'sample1',
            name: 'Wireless Earbuds',
            price: 79.99,
            image: 'https://via.placeholder.com/300',
            category: 'Electronics',
            description: 'High-quality wireless earbuds with noise cancellation.'
        },
        {
            _id: 'sample2',
            name: 'Cotton T-Shirt',
            price: 24.99,
            image: 'https://via.placeholder.com/300',
            category: 'Clothing',
            description: 'Comfortable cotton t-shirt, perfect for everyday wear.'
        },
        {
            _id: 'sample3',
            name: 'Coffee Maker',
            price: 49.99,
            image: 'https://via.placeholder.com/300',
            category: 'Home & Kitchen',
            description: 'Programmable coffee maker with timer.'
        },
        {
            _id: 'sample4',
            name: 'Mystery Novel',
            price: 14.99,
            image: 'https://via.placeholder.com/300',
            category: 'Books',
            description: 'Bestselling mystery novel that will keep you guessing.'
        },
        {
            _id: 'sample5',
            name: 'Smartphone',
            price: 599.99,
            image: 'https://via.placeholder.com/300',
            category: 'Electronics',
            description: 'Latest smartphone with high-resolution camera.'
        },
        {
            _id: 'sample6',
            name: 'Jeans',
            price: 39.99,
            image: 'https://via.placeholder.com/300',
            category: 'Clothing',
            description: 'Classic blue jeans, slim fit.'
        },
        {
            _id: 'sample7',
            name: 'Blender',
            price: 34.99,
            image: 'https://via.placeholder.com/300',
            category: 'Home & Kitchen',
            description: 'High-speed blender for smoothies and more.'
        },
        {
            _id: 'sample8',
            name: 'Sci-Fi Novel',
            price: 12.99,
            image: 'https://via.placeholder.com/300',
            category: 'Books',
            description: 'Award-winning science fiction novel.'
        }
    ];
    
    // Filter by search term
    if (searchTerm) {
        products = products.filter(product => 
            product.name.toLowerCase().includes(searchTerm) || 
            product.description.toLowerCase().includes(searchTerm)
        );
    }
    
    // Filter by category
    if (category) {
        products = products.filter(product => product.category === category);
    }
    
    // Sort products
    if (sortOption) {
        switch (sortOption) {
            case 'price-asc':
                products.sort((a, b) => a.price - b.price);
                break;
            case 'price-desc':
                products.sort((a, b) => b.price - a.price);
                break;
            case 'name-asc':
                products.sort((a, b) => a.name.localeCompare(b.name));
                break;
            case 'name-desc':
                products.sort((a, b) => b.name.localeCompare(a.name));
                break;
        }
    }
    
    // Display filtered products
    displayProducts(products);
}

// cart.js
document.addEventListener('DOMContentLoaded', function() {
    // Update cart count
    updateCartCount();
    
    // Load cart items
    loadCartItems();
    
    // Add event listener for checkout button
    document.getElementById('checkout-btn').addEventListener('click', function() {
        document.getElementById('cart-summary').classList.add('hidden');
        document.getElementById('checkout-form').classList.remove('hidden');
    });
    
    // Add event listener for order form submission
    document.getElementById('order-form').addEventListener('submit', function(e) {
        e.preventDefault();
        placeOrder();
    });
});

// Update cart count
function updateCartCount() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const count = cart.reduce((total, item) => total + item.quantity, 0);
    document.getElementById('cart-count').textContent = count;
}

// Load cart items
function loadCartItems() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const cartItemsContainer = document.getElementById('cart-items');
    
    if (cart.length === 0) {
        // Display empty cart message
        cartItemsContainer.innerHTML = `
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h2>Your cart is empty</h2>
                <p>Looks like you haven't added any products to your cart yet.</p>
                <a href="products.html" class="btn">Start Shopping</a>
            </div>
        `;
        
        // Hide cart summary
        document.getElementById('cart-summary').classList.add('hidden');
        return;
    }
    
    // Clear cart items container
    cartItemsContainer.innerHTML = '';
    
    // Add each item to the cart
    cart.forEach(item => {
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        
        cartItem.innerHTML = `
            <div class="cart-item-image">
                <img src="${item.product.image}" alt="${item.product.name}">
            </div>
            <div class="cart-item-details">
                <h3 class="cart-item-title">${item.product.name}</h3>
                <p class="cart-item-price">$${item.product.price.toFixed(2)}</p>
                <div class="cart-item-quantity">
                    <button class="quantity-btn decrease" data-id="${item.product._id}">-</button>
                    <input type="number" class="quantity-input" value="${item.quantity}" min="1" data-id="${item.product._id}" readonly>
                    <button class="quantity-btn increase" data-id="${item.product._id}">+</button>
                    <button class="cart-item-remove" data-id="${item.product._id}">
                        <i class="fas fa-trash"></i> Remove
                    </button>
                </div>
            </div>
        `;
        
        cartItemsContainer.appendChild(cartItem);
    });
    
    // Add event listeners for quantity buttons and remove buttons
    document.querySelectorAll('.quantity-btn.decrease').forEach(button => {
        button.addEventListener('click', function() {
            updateQuantity(this.dataset.id, -1);
        });
    });
    
    document.querySelectorAll('.quantity-btn.increase').forEach(button => {
        button.addEventListener('click', function() {
            updateQuantity(this.dataset.id, 1);
        });
    });
    
    document.querySelectorAll('.cart-item-remove').forEach(button => {
        button.addEventListener('click', function() {
            removeItem(this.dataset.id);
        });
    });
    
    // Update order summary
    updateOrderSummary();
}

// Update item quantity
function updateQuantity(productId, change) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    const itemIndex = cart.findIndex(item => item.product._id === productId);
    
    if (itemIndex !== -1) {
        // Update quantity
        cart[itemIndex].quantity += change;
        
        // Remove item if quantity is 0 or less
        if (cart[itemIndex].quantity <= 0) {
            cart.splice(itemIndex, 1);
        }
        
        // Save updated cart
        localStorage.setItem('cart', JSON.stringify(cart));
        
        // Reload cart items
        loadCartItems();
        
        // Update cart count
        updateCartCount();
    }
}

// Remove item from cart
function removeItem(productId) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Filter out the item to remove
    cart = cart.filter(item => item.product._id !== productId);
    
    // Save updated cart
    localStorage.setItem('cart', JSON.stringify(cart));
    
    // Reload cart items
    loadCartItems();
    
    // Update cart count
    updateCartCount();
}

// Update order summary
function updateOrderSummary() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Calculate subtotal
    const subtotal = cart.reduce((total, item) => total + (item.product.price * item.quantity), 0);
    
    // Calculate shipping (free for orders over $50)
    const shipping = subtotal > 50 ? 0 : 5.99;
    
    // Calculate total
    const total = subtotal + shipping;
    
    // Update summary in DOM
    document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
    document.getElementById('shipping').textContent = shipping === 0 ? 'Free' : `$${shipping.toFixed(2)}`;
    document.getElementById('total').textContent = `$${total.toFixed(2)}`;
}

// Place order
async function placeOrder() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    if (cart.length === 0) {
        return;
    }
    
    // Get form values
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const address = document.getElementById('address').value;
    
    // Calculate total price
    const totalPrice = cart.reduce((total, item) => total + (item.product.price * item.quantity), 0);
    
    // Create order object
    const order = {
        products: cart.map(item => ({
            product: item.product._id,
            quantity: item.quantity
        })),
        totalPrice,
        customerName: name,
        customerEmail: email,
        customerAddress: address
    };
    
    try {
        // Send order to API
        const response = await fetch('http://localhost:5000/api/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(order)
        });
        
        if (!response.ok) {
            throw new Error('Failed to place order');
        }
        
        const data = await response.json();
        
        // Show order confirmation
        document.getElementById('checkout-form').classList.add('hidden');
        document.getElementById('order-confirmation').classList.remove('hidden');
        document.getElementById('order-id').textContent = data._id;
        
        // Clear cart
        localStorage.removeItem('cart');
        
        // Update cart count
        updateCartCount();
    } catch (error) {
        console.error('Error placing order:', error);
        // Show mock success for demo purposes
        document.getElementById('checkout-form').classList.add('hidden');
        document.getElementById('order-confirmation').classList.remove('hidden');
        document.getElementById('order-id').textContent = 'DEMO' + Math.floor(Math.random() * 1000000);
        
        // Clear cart
        localStorage.removeItem('cart');
        
        // Update cart count
        updateCartCount();
    }
